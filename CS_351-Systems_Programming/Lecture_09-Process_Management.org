#+TITLE: Lecture 09: Process Management
#+AUTHOR: Karl Hallsby
#+DATE: September 23, 2020

* Making Processes, ~fork~
#+BEGIN_SRC c
#include <unistd.h>

/* typedef int pid_t */

pid_t fork();
/* Makes a system call to trap to the OS.
 ,* This requests the OS to create a new process.
 ,* This is mostly a duplicate of the original. */
#+END_SRC

  * ~fork~ creates a copy of the current process
  * This child process is a duplicate of the parent process
    - Some metadata is different, but the binary image is the same
    - Starts with the same:
      + PC, the child starts *at the same place in the program as the parent*
      + SP
      + FP
      + Registers
      + Open Files
  * ~fork~ returns *twice*
    - Once to the parent process, with the ~pid~ of the child (>0).
    - Once to the child process, with the return code of ~fork~ (sentinel value of 0).
    - There is usually a split in the logical control flow between the parent and child.
  * ~pid_t~ is a system-wide unique process identifier
    - This is technically an integer, so we can do normal integer arithmetic

#+BEGIN_SRC c
#include <unistd.h>
#include <stdio.h>

int main(void) {
	fork();
	printf("Hello World!\n");
	return 0;
}
#+END_SRC

  * This code will print "Hello World!" twice, but in no particular order.

#+BEGIN_SRC c
#include <unistd.h>
#include <stdio.h>

int main(void) {
	fork();
	fork();
	printf("Hello World!\n");
	return 0;
}
#+END_SRC

  * This code will print "Hello World!" four time, but in no particular order.
  * The main parent thread has 2 children, and the parent's first child makes another child.

** Fork Bomb
   * Just generates new processes as fast as possible.
#+BEGIN_SRC c
#include <unistd.h>

int main() {
	while(1)
		fork();
	return 0;
}
#+END_SRC

** Using Processes
#+BEGIN_SRC c
#include <unistd.h>
#include <stdio.h>

void fork0() {
	int pid = fork();
	if (pid == 0) {
		printf("Hello from child\n");
	} else {
		printf("Hello from parent\n");
	}

	return;
}

int main(void) {
	fork0();
	return 0;
}
#+END_SRC

   * The results from this program executing is that both print statements are executed
   * But, you are not guaranteed the order in which they execute
     - Child prints first
     - Parent prints first
     - Child and parent print at the same time
     - But, there is a lock for the screen, blocking other processes
     - This lock is what makes the output text appear in order
   * The parent and child typically have some kind of logical control flow to have them do different things

** Fork Fails
   * Most system calls will return ~-1~ on a failure
   * The global variable ~errno~ is populated with the "cause" of the failure
   *

#+BEGIN_SRC c
#include <errno.h>

extern int errno;
#+END_SRC

* Terminating Processes, ~exit~
  * The simplest way to terminate a process is for the main process to ~return~
  * You can also use the ~exit~ call.
    - This exits immediately
    - This may prevent a normal ~return~
  * UNIX convention is that exit status ~0~ is success
  * Any other value is some error code

** ~atexit~
   * ~int atexit (void (*fn)());~
   * Registers a function to be used before the program is ~exit~
   * Call function before the ~exit~
   * Just have to place the registration somewhere
   * These handlers are inherited by children

** Zombie Processes
   * All processes become zombie processes eventually
   * "Dead" but tracked by the OS
     - PID remains in-use
     - Exit status can be queried.
   * Terminating/Terminated processes turn into /zombies/
     - These are just processes that have completed and exited, but the parent has not used/reaped them yet.
   * All processes are responsible for reaping their own (immediate) children
     - If a program has 2 forks, the child of the child is *not* reaped by the original parent.
   * You get rid of zombie processes by *killing* the parent processes
     - Note that this is *not* terminating the process.
   * A parent process is reaped by its starting process.
     - If a process is completely orphaned, it transfers ownership to ~PID = 1~, which will then reap it

* Problems with Multiprocessing
** Race Condition
   * Some unprotected shared memory has a flaw in its logical access
   * If we don't protect it, then the value stored is in an inconsistent state
   * Happens with /multi-threading/
     - Doesn't happen with multi-processing
     - Multi-processing makes a *full copy of memory*

* ~wait~
   * Called by a process with >= 1 children
   * Waits (if needed) for a child to terminate
     - Returns the exit status of the child
       + Termination cause
       + Normal/abnormal termination
       + Some macros defined
	 * ~WIFEXITED(status)~: Did the process exit normally?
	 * ~WEXITSTATUS(status)~:
   * Reaps a zombie child
     - If >= 1 zombified children, picks one
   * Returns the reaped child's ~PID~ and exit status via pointer (if non-~NULL~)
   * If called by a process with no children
     - Returns ~-1~ and populates ~errno~ with an error code

#+BEGIN_SRC c
#include <unistd.h>
#include <stdio.h>
#include <stdlib.h>
#include <sys/wait.h>

int main() {
	pid_t cpid;
	if (fork() == 0) {
		exit(0); /* Child -> Zombie */
	}
	else {
		cpid = wait(NULL); /* Reaping Parent */
	}

	printf("Parent pid = %d\n", getpid());
	printf("Child pid  = %d\n", cpid);
	while(1);
}
#+END_SRC

** Synchronization Mechanism
   * A parent can wait for the child to finish, synchronizing things

#+BEGIN_SRC c
#include <stdlib.h>
#include <stdio.h>
#include <sys/wait.h>
#include <unistd.h>

void fork9() {
	if (fork() == 0) {
		printf("HC: hello from child\n");
	} else {
		printf("HP: hello form parent\n");
		wait(NULL);
		printf("CT: child has terminated\n");
	}
	printf("Child is dying. Bye\n");
}

int main() {
	fork9();
	return 0;
}
#+END_SRC


* Changing the running program, ~exec~
  * ~exec~ family of syscalls. All of these are front-ends to ~execve~.
    1) ~execl~
    2) ~execlp~
    3) ~execv~
    4) ~execvp~
  * The variations in the family:
    - ~l~: Args passed as list of strings to ~main()~
    - ~v~: Args passed as array of strings to ~main()~
    - ~p~: Path(s) to search for running program
    - ~e~: Environment (Environment variables and other state) specified by the caller
    - Each of these can be mixed to some extent.
    - Only constant between all of these is that the first argument to the ~exec...~ function is the name of the file to execute.
  * Execute a *new program* within the *current process context*
    - This doesn't give a new ~PID~
    - Replaces the binary image, in-place.
  * Complements ~fork~
  * When called, ~exec~ *never returns*
    - Starts the execution of the new program.
    - *REPLACES* the current process' running binary image

#+BEGIN_SRC c
#include <unistd.h>
#include <stdio.h>

int main() {
	execl("/bin/echo", "/bin/echo",
	      "hello", "world", (void *)0);
	/* Everything below the execl becomes unreachable code, as the new
	 ,* program REPLACES the original binary. */
	printf("Done exec-ing...\n");
	return 0;
}
#+END_SRC

Results:
#+BEGIN_SRC bash
$ ./a.out
hello world
#+END_SRC

#+BEGIN_SRC c
int main() {
	if (fork() == 0) {
		execl("/bin/ls", "/bin/ls", "-l", (void *)0);
		exit(0);
	}
	wait(NULL);
	printf("Command Completed\n");
	return 0;
}
#+END_SRC

Results:
#+BEGIN_SRC bash
$ ./a.out
-rwxr-xr-x 1 ... a.out
-rwxr-xr-x 1 ... demo.c
Command completed
#+END_SRC

* Shell
  * This was the original computer interface to the operating system.
  * Essentially an infinite ~while~-loop to get a line of user input
  * When a full input is achieved, ~forks~ itself and ~exec~ for the specified binary
  * Shell will ~wait~ on the started process, by default
    - This does *NOT* apply if you use the ~&~ symbol at the end
    - No ~wait~ occurs
  * *Essential Function*:
    - Let user issue requests to the operating system
    - Manage processes
      + List
      + Stop
      + Terminate
    - Browse and manipulate file system
  * Essentially a REPL for the operating system.
  * Distinguish between /foreground/ (~fg~) and /background/ (~bg~)
    - ~fg~ processes "blocks" additional commands from being run
    - Can have any number of ~bg~ processes at once
  * Shell conventions:
    - ~prog-name &~: Starts ~prog-name~ and runs it in the background
    - ~fg~ and ~bg~ move a process into the ~fg~ or ~bg~, respectively
  * We want a notification that a child has zombified, so that we can reap it
    - This notification is the idea of Exceptional Control Flow
    - These are /Signals/

* Signals
  * Signals are messages delivered by the kernel to the user processes
    - These are in response to OS events (segfault)
    - These are created at the request of another process
  * These are delivered by a /handler function/ in the *receiving process*
  * Life cycle of a signal.
    1. Sending a signal to a process
       - ~kill(pid_t pid, int sig)~ function is an example of a function that sends a signal.
       - Give the process with ~pid~ the signal ~sig~.
       - There is a list of signals with names and values.
	 + ~1~ ~SIGHUP~: Terminate process, Terminal line hangup
	 + ~2~ ~SIGINT~: Terminate process, Interrupt program.
	 + ~3~ ~SIGQUIT~: Create core image, quits program
       - [[*Shell Process Groups][Shell Process Groups]]
    2. Registering a handler for a given signal
       - Some signals cannot be caught by the process
       - ~sig_t signal(int sig, sig_t func)~ Register function to a particular signal
       - Children inherit their parent's signal handlers after a ~fork~.
       - Lose them when you ~exec~ to another program.
    3. Delivering a signal to a process (done by kernel)
       - 2 bitmaps per process
	 1) Pending
	 2) Blocked
       - Some signals cannot be delivered/blocked (~SIGKILL~, and others)
       - Newly forked child inherits the parent's blocked bitmap, but pending vector is empty
    4. Designing a signal handler

#+BEGIN_SRC c
#include <unistd.h>
#include <sys/wait.h>

int main() {
	int stat; /* stat is for the status of the child. */
	pid_t pid;
	if ((pid = fork()) == 0)
		while(1); /* Child goes into infinite while-loop. */
	else {
		kill(pid, SIGINT); /* Parent INTERRUPTs child with SIGINT*/
		wait(&stat);
		/* Signal handler in the parent to handle how a child handled a signal. */
		if (WIFSIGNALED(stat))
			psignal(WTERMSIG(stat), "Child term due to:");
	}

	return 0;
}
#+END_SRC

  * It can be useful to send a signal to multiple processes at once.
  * Children inherit a group ID ~pgid~ from parent when forked.
    - The founder of the group becomes the group leader
    - The group leader is the process where ~pid~ = ~pgid~.
    - Become group leader by ~setpgrp~.
    - These interact with signals
    - If ~kill~ is given a negative value, it will kill that process group

** Shell Process Groups
   * For most processes started from a shell, they inherit the shell's process group ID
   * This can be changed through the ~setpgrp~ function.
     - If this is done, any subsequent child processes started by this one will inherit that new ~pgid~.

** Registering Signal Handlers
#+BEGIN_SRC c
#include <stdio.h>

#include <unistd.h>
#include <stdlib.h>
#include <sys/signal.h>

pid_t cpid;

void parent_handler(int sig) {
	printf("Relay to child");
	kill(-cpid, SIGINT);
}

void child_handler(int sig) {
	printf("Child Dying");
	exit(0);
}

int main() {
	if((cpid = fork()) == 0) {
		signal(SIGINT, child_handler);
		setpgrp(); /* Child becomes group leader. */
		while(1);
	}

	signal(SIGINT, parent_handler);
	while(1);
}
#+END_SRC

#+BEGIN_SRC bash
$ ./a.out
^CRelaying SIGINT to child
Child Dying
#+END_SRC

** Adjusting Blocked signals

* UNIX Family Tree
  * ~fork~ and ~exec~ are used by kernel too
  * BIOS -> Bootloader -> Kernel
    1) BIOS
       - BIOS is on the motherboard
       - Initializes things with proper default values
       - Looks for bootable devices, like a bootloader
    2) Bootloader
       - Sits at the front of a disk's partition
       - Tells CPU where to start loading the kernel from
       - Loads the proper kernel into memory
    3) Kernel
       - Once the kernel has started, ~fork~ and ~exec~ can start happening
       - Starts initializing various things of the system
       - Does a ~fork~ and ~exec~ for each daemon, user process, etc.
       - Login does an ~exec~ on itself to start something else
       - Starts stuff for user-land processes too.
