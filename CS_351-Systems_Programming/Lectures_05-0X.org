#+TITLE: Lectures 05-0X, A C Primer
#+AUTHOR: Karl Hallsby
#+DATE: September 09, 2020

* Man Pages
Manual pages included in the GNU/Linux operating systems.

Accessed with =man= command.

* C
  * Imperative
    - Finite-state based computation/machines
    - In contrast to Functional Languages
  * Statically Typed
    - When something is declared to be a certain type, it stays that way
    - Have to deal with type polymorphism
    - Have to perform type checking during compilation
  * Weakly Type Checked
    - You are not guaranteed that when you access data that you are interpreting the bytes the right way.
    - You can typecast pointers and do weird things.
    - Compiler might not throw type-checking errors
  * Procedural
    - You can organize repeated computation into functions/procedures
  * "Low-Level"
    - As close as possible to hardware, without writing assembly

** C vs. Java
| C                                                     | Java                                                    |
|-------------------------------------------------------+---------------------------------------------------------|
| Procedural                                            | Object-oriented                                         |
| Source-level portability (Need to recompile)          | Compiled-code portability (Can just move binary around) |
| Manual Memory management (You must deallocate memory) | Garbage collected (Runtime system deallocates memory)   |
| Pointers reference addresses                          | Opaque memory references                                |
| Manual error checking                                 | Exception handling                                      |
| Manual namespace partitioning                         | Namespaces with packages                                |
| Small, low-level libraries                            | Vast, high-level class libraries                        |

** Philosophies
*** C
"Make it efficient and simple, and let the programmer do whatever they want..."

*** Java
"Make it portable, provide a huge class library, and try to protect the programmer from doing stupid things.

** ANSI C
   * American National Standards Institute
   * These standards allow for cross-compilation.
   * Current ANSI C11

* C11
  * Language Syntax
  * Language Semantics
  * Runtime Features/Behavior
    - Type info
    - Memory Model
  * Limited Standard Library API

It leaves *OUT* many "core" libraries.

* Syntax and Structure
** Primitive Types
   * =char= - *One byte* integers (0-255)
   * =int= - Integer, /at least/ 16 bits
   * =float= Single precision floating point
   * =double= Double precision floating point

** Integer Type Prefixes
   * =signed= (default)
   * =unsigned=, 0-2^(# bits)
   * =short= at least 16 bits
   * =long= at least 32 bits
   * =long long= at least 64 bits

** C's Weak Typechecking
#+BEGIN_SRC c
/* Types are implicitly converted */
char c = 0x41424344;
int i = 1.5;
unsigned in t u = -1;
float f = 10;
double d = 2.5F; // Note: 'F' suffix for floating point literals

printf("c = '%c', i = %d, u = %u, f = %f, d = %f\n", c, i, u, f, d);

/* Typecasts can be used to force conversions */
int r1 = f/d,
	r2 = f / (int) d;

printf("r1 = %d, r2 = %d\n", r1, r2);
#+END_SRC
c = 'D', i = 1, u = 4294967295, f =10.00000

** Basic Operators
   * Arithmetic:
     - =+=
     - =-=
     - =*=
     - =&=, Bitwise AND
     - =|=, Bitwise OR
     - =~=, Bitwise negation
   * Relational
   * Logical
   * Assignment
     - ===
     - =+==
     - =*==
   * Conditional
     - =bool ? true_exp : false_exp=

** Booleans
   * =0= is False
   * Everything else is considered true
     - Canonically =1= is true

#+BEGIN_SRC c
!(0)         // 1
0 || 2       // 1
3 && 0 && 6  // 0
!(1234)      // 0
!!(-1020)    //1
#+END_SRC

** Control Structure
   * if-else
   * switch-case
   * while, for, do-while
     - =continue=
     - =break=

** Variables
   * *MUST* be _declared_ before use.
   * This declaration implicitly *allocates* storage for the underlying data.
   * Variables can be declared with =global= for program-wide usage.
   * Variables do *not* have to be visible to be alive, and vice versa.

*** Visibility
    * /Where/ a symbol can be seen from.
      - If it cannot be seen, then it cannot be used in any way
    * /How/ can we refer to it?
      - What identifiers/modifiers/namespacing is needed to identify this symbol?
    * ~global~ variables must be declared outside any function.
      - Not deallocated *throughout* a program's execution.
      - Always available until the program terminates.
    * Local variables are defined within a function.
      - The [[*Lifetime][Lifetime]] of a stack-based local variable is the scope of the variable
      - Typically, the scope is a function, but can be an ~if~, a ~while~, etc.
    * ~extern~ on a variable tells the compiler to look for the global variable that is in another file
      - Use this if the global variable is *Declared and Defined* in a ~.c~ file, and cannot be defined in a ~.h~ file.
      - This also allows you to separate the *declaration* and *definition* of a variable
    * ~static~ limits the visibility of a symbol to its file.

*** Lifetime
    * /How Long/ does allocated storage space remain usable?
    * This is distinctly different than a symbol not being visible.
      - Pointers are a good example of this.
      - A pointer can have the memory underneath it deallocated, ending the lifetime of the pointer, but keeping the pointer in-scope.
    * ~static~ initializes the variable in the static portion of the binary, meaning it is *always* alive.

** Functions
   * C's /top-level/ modules

*** Declaration
    * Announce that a function with those input and output parameters
    * Included in /header/ =.h= files

*** Passing Parameters
**** Pass-by-Value
     * Make a copy of the value passed to a function and give it a new name
     * This is a *COPY*, meaning modifications to the copy *DO NOT* affect the original

**** Pass-by-Reference
     * Pass a pointer into the called function
     * This gives the called function access to the thing given to it.
     * This allows for efficient passing of data from one function to another.
     * This is particularly valuable for large ~struct~, arrays, etc.

*** Definition
    * The actual implementation
    * Inside /source/ =.c= files.

=hashtable.h=
#+BEGIN_SRC c
unsigned long hash(char *str);
hashtable_t *make_hashtable(unsigned long size);
void ht_put(hashtable_t *ht, char *key, void *val);
#+END_SRC

=hashtable.c=
#+BEGIN_SRC c
#include "hashtable.h"

unsigned long hash(char *str) {
	unsigned long hash = 5381;
	int c;
	while ((c = *str++))
		hash = ((hash << 5) + hash) + c;
	return 0;
}
#+END_SRC

=main.c=
#+BEGIN_SRC c
#include "hashtable.h"

int main(int argc, char *argv[]) {
	hashtable_t *ht;
	ht = make_hashtable(atoi(argv[1]));
	return 0;
}
#+END_SRC

* Pointers
This should technically go in [[*Syntax and Structure][Syntax and Structure]], but pointers deserve their own section.

A /pointer/ is a variable declared to store a memory address
A /memory address/ is the address to which we can refer to data in-memory.
The size of the pointer is determined by the architecture of the CPU.

A pointer is designated by its *declared* type, not its contents.
This allows the pointer's contents to be re-interpreted based on the type of the pointer.

** Pointer Syntax
#+BEGIN_SRC c
#include <stdio.h>

int main(void) {
	int i, j, *p, *q;

	i = 10;       /* i is defined to have the value 10 */
	p = &j;       /* j is uninitialized still */
	q = p;        /* Set the pointer q to the address in p */
	,*q = i;      /* Store i in the location q POINTS to, which is j right now */
	,*p = *q * 2; /* Multply the value q POINTS to by 2 and store in the location POINTED to by p */
	printf("i=%d, j=%d, *p=%d, *q=%d\n", i, j, *p, *q);
	return 0;
}
#+END_SRC

This outputs: "~i=10, j=20, *p=20, *q=20~"

*** Declaration
#+BEGIN_SRC c
/* type *var_name; */
int *ip;
char *cp;
struct student *sp;

int i = 5; /* i is an int containing 5 */
int *p;    /* p is a POINTER to an int */

p = &i;    /* Store the ADDRESS of i in p */

int j;     /* j is an uninitialized int */
j = *p;    /* store the value p POINTS to in j */
#+END_SRC

*** Getting an Address
You can get the address of a name with ~&~.

*** Dereferencing
~*~ is *also* used to *dereference* the pointer!

** /Why/ have pointers?
   * Direct access to memory
   * Have to manage memory yourself
   * /ALWAYS/ Passed-by-Value
   * This even happens on composite data structures, like ~struct~
   * Pointers enable us to perform /actions at a distance/
#+BEGIN_SRC c
void bar(int *p) {
	*p = ...; /* Some change to some remote var. */
	return;
}

void bat(int *p) {
	bar(p);
}

void baz(int *p) {
	bat(p);
}

int main() {
	int i;
	baz(&i); /* i is only changed once we reach bar(). */
	return 0;
}
#+END_SRC

#+BEGIN_SRC c
void swap(int x, int y);
void p_swap(int *p, int *q);

int main() {
	int a = 5, b = 10;
	swap(a, b);
	/* want a == 10, b == 5
	 ,* swap() doesn't do that though. */
	p_swap(&a, &b);
	/* Pass memory addresses into p_swap, allowing for direct access.*/
	return 0;
}

/* This uses call-by-value and does the swap in function-local variables.
 ,* This means that the original a and b would NOT be changed. */
void swap(int x, int y) {
	int tmp = x;
	x = y;
	y = tmp;
	return;
}

/* This uses call-by-reference and does the swap on the original memory locations.
 ,* This means that the original a and b WOULD be changed. */
void p_swap(int *p, int *q) {
	int tmp = *p;
	*p = *q;
	*q = tmp;
	return;
}
#+END_SRC

**** Java doesn't really have pointers.
     * Methods have primitives Passed-by-Value
     * Objects are Passed-by-Reference

** Uninitialized Pointers
   * Are like all other uninitialized variables
   * They contain garbage!
   * If you dereference the pointer, you dereference garbage, which is undefined behavior.
     - If you're lucky, this is a crash.
     - If you're unlucky, unknown results may happen.

** Null Pointers
   * Never returned by the ~&~ operator.
   * Safe to use as a sentinel value
   * Written as ~0~ or ~NULL~ in /pointer context/
     - Typically ~#define NULL 0~
#+BEGIN_SRC c
#define NULL 0

int main() {
	int i = 0;
	int *p = NULL;

	if (p) {
		/* Like safe to dereference */
	}
	return 0;
}
#+END_SRC

** ~void~ Pointer
   * This is a pointer type that says there is no type
~
* Strings/Character Arrays
  * The null character ~'\0'~ is helpful
  * This character is used to terminate strings, as the last character
  * It's numerical value is 0.
  * Just ~'\0'~ terminated character arrays.
  * ~printf~ treats strings as a character array terminated by a null character
#+BEGIN_SRC c
#include <stdio.h>

int main() {
	char *str = "hello world!"; /* 12 characters + 1 null character. */
	str[12] = 10; /* Set the null terminator to 10. */
	printf("%s", str);
	return 0;
}
#+END_SRC

#+BEGIN_SRC c
#include <stdio.h>

/* Shell will insert null terminators on each command line argument.
 ,* argc has the number of things passed at once, including the program name. */
int main(int argc, char *argv[]) {
	int i;
	for (i=0; i<argc; i++) {
		printf("%s", argv[i]);
		printf("%s", ((i < argc-1)? ", " : "\n"));
	}

#+END_SRC

** String/Character Array Utilities
   * All these string functions are in ~<string.h>~
   * ~strcpy~ Copy characters from source to destination array, including the ~'\0'~
#+BEGIN_SRC c
void strcpy(char dst[], char src[]) {
	int i = 0;
	do {
		dst[i] = src[i];
	} while (src[i++] != '\0');
}
#+END_SRC
   * ~strcat~ Attaches strings
   * ~strcmp~ Compares strings byte-by-byte
   * ~strlen~ Finds length of string by finding null character
   * ~memcpy~ Copies the contents of one memory location to another
   * ~memmove~ Moves the contents of one memory location to another

* Arrays
  * Contiguous region of memory
  * Indexed by data type size
  * Declared by ~type arr_name[size]~ and allocates memory
    - This allocates the space from the function *stack*
    - NOT the heap
    - They *MUST* be statically sized
  * There is *NO* metadata about the array
    - Length
    - *NO* implicit size
    - *NO* bounds checking
#+BEGIN_SRC c
int main() {
	int i_arr[10]; /* Array of 10 ints, 40 bytes */
	char c_arr[80]; /* Array of 80 characters, 80 bytes */
	char td_arr[24][80]; /* 2-D Array, 24 x 80 x 1 bytes*/
	int *ip_arr[10]; /* Array of 10 pointers which point to ints, 40 or 80 bytes */

	/* Dimension inferred if initialized when declaring. */
	short grades[] = { 75, 90, 85, 100 };

	/* Can omit the first dimension, as partial initialization is allowed. */
	int sparse[][10] = { { 5, 3, 2},
			     { 8, 10 },
			     { 2 } };

	/* If partially initialized, remaining components are 0 */
	int zeros[1000] = { 0 }; /* Initialize all values to 0 */

	/* Can also use designated initializers for specific indices */
	int nifty[100] = { [0] = 0, /* Element zero has value 0*/
			   [99] = 1000, /* Element 99 has value 1000 */
			   [49] = 250 };
#+END_SRC

  * The array syntax is syntactic sugar for dereferencing a pointer and pointer arithmetic
#+BEGIN_SRC c
int main() {
	int arr[100];
	int *pa = arr;

	pa[10] = 0;

	printf("%d", *(pa + 10));
	/* We can access a value in the array using pointer arithmetic.
	 ,* This should return the 0 we just set. */
	return 0;
}
#+END_SRC

  * You can typecast arrays
#+BEGIN_SRC c
int main() {
	int arr[100];
	arr[10] = 0xDEADBEEF;

	char *pa = (char *)arr;
	pa[10] = 0;
	printf("%s" arr[10]);
	return 0;
}
#+END_SRC

* Dynamic Memory Allocation
  * Pointer will point into the heap
  * C requires /explicit/ memory management
    - Must request and free memory manually
    - If you forget to free -> Memory Leak
      + Only released once the process terminates
    - If you free twice, in 2 different spots from 2 different pointers -> Double-Free
    - If you free, but use the pointer again -> Dangling Pointer
  * dynamic vs. ~static~ and local allocation.
    - ~static~: Lifetime is forever
    - Local: Lifetime is their LIFO system
    - Dynamic: Can have a variable lifetime and have a variable storage size
      + The pointer that controls it is the only way to find the memory you are given.
*** Main Operations
    * Defined in ~<stdlib.h>~
      1) ~malloc~
	 - /Type agnostic/
	 - Doesn't care what data types we are *going* to store in the memory
	 - Does this by returning a ~void*~
      2) ~calloc~
      3) ~realloc~
      4) ~free~
*** Other Languages
    * languages like Java/Python who use /implicit/ memory management
    * You allocate with the ~new~ reserved word.
    * Then, the runtime system will scan the variables in-use and see if any cannot be reached
    * If they cannot be reached, the memory will be deallocated.

* Compilation
  * You can manually compile every =.c= file with =gcc=
  * This can be very painful for larger projects
  * We use makefiles to manage this.

** Stages
   1) Preprocessing
      * Preprocessor /directives/
      * Text substitution
      * Macros
      * Conditional compilation
      * Directives starting with =#=
      * Performs complete textual substitution behind the scenes
   2) Compile
      * From source language to object code/binary
   3) Link
      * Put inter-related object codes together
      * Resolve calls/references and definitions
      * Put absolute/relative addresses into the binary for the =call= instruction
      * Want to support /selective/ public APIs
      * Don't always want to allow linking a call to a definition
   4)

** Makefiles
   * Allow for:
     - Incremental compilation
     - Automated compilation
