#+TITLE: Lecture 8
#+AUTHOR: Karl Hallsby
#+DATE: April 29, 2020

* Questions
** Errors in Eliza
   * The zip-file did *NOT* contain the errors
   * The version on the website did.
   * *THIS MEANS THAT WE HAD THE RIGHT VERSION*

** Always Left-to-Right Evaluation?
   * Not always
   * Top-down (outer-most redex first)
   * Parsing -> Figure out what was written
   * Decompose -> Build expression tree to figure out semantics
   * Evaluation -> Find concrete values

** Cases vs. Guards
   * Cases are pattern matched on the shape (constructor) of arguments
     - Cases are nicities
     - You can implement any case-expression with guards.
   * Guards allow for any complicated function as a guard, so long as it behaves as a predicate (True/False)
     - Slightly more complicated mechanism

* Sudoku (F2)
  * First assignment verified if a sudoku board is solvable.
  * This assignment is to find a solution to the sudoku board

** Expectations
   1) Read a file with a set of sudoku board
   2) Solve the current sudoku and show the result
   3) Present the current unsolved or partially solved sudoku to the user
   4) Support the user in solving a sudoku
   5) Wrap this in a REPL loop
*** Other Notes
    * Style is important this time
    * Follow lab4 instructions, giving a nice monadic solution to the problem
    * I/O will take a little while to master, start this early.
    * You will get help with the graphics.

* String Alignment (N2)
  * Alignment of 2 strings is a way of finding a correspondence between them
  * Meaning laying one on top of the other to find how related they are (how many characters shared)
  * Strings may be different lengths, so we can introduce spaces to the shorter one
    - However, we can add spaces to each string lengthening both
    - In addition, 2 spaces cannot be on top of one another

|---+---+---+---+---+---+---|
| H | A | S | K | E | L | L |
| P | A | S | C | A | - | L |
|---+---+---+---+---+---+---|

|---+---+---+---+---+---+---+---|
| H | - | A | S | K | E | L | L |
| - | P | A | S | C | A | - | L |
|---+---+---+---+---+---+---+---|

However, this alignment is not allowed:
|---+---+---+---+---+---+---+---|
| - | H | A | S | K | E | L | L |
| - | P | A | S | C | A | - | L |
|---+---+---+---+---+---+---+---|
NOT ALLOWED

  * We use 3 scores to optimize the alignment of the strings.
    1) Value of a match
    2) Value of a mismatch
    3) Value of adding a space to create matches
  * In a brute-force computation method, this is a hyperexponential complex problem.
    - 2 Strings of length 1000 has 10^764 different possible alignments
    - This is more than the number of atoms in the universe
  * However, we can be smart about it
    -

#+BEGIN_SRC haskell
optimalAlignments :: Int -> Int -> Int -> String -> String -> [AlignmentType]

score :: Int -> Int -> Int -> String -> String -> Int
#+END_SRC


* Memoization
  * Laziness = Call-by-Name (Outer-most evaluation first) + Sharing
  * Memoization ensures the system evaluates only what it needs to, and not much more

** Fibonacci Example for Memoization
#+BEGIN_SRC haskell
-- Mathematical definition of Fibonacci
fib 0 = 0
fib 1 = 1
fib n = fib (n-2) + fib (n-1)

-- Algorithm that returns a pair of consecutive Fibonacci numbers.
fibP :: Int -> (Int, Int)
fibP 0 = (0, 1)
fibP n = (y, x+y)
         where
           (x,y) = fibP (n-1)

-- The list of Fibonacci values, defined directly.
fibs :: [Integer]
fibs = 0 : 1 : zipWith (+) fibs (tail fibs)
#+END_SRC
